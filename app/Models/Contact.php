<?php

namespace App\Models;

use App\SystemControls\ResultControl;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;

class Contact extends Model
{
    protected $table = 'contacts';

    protected $fillable = [
        'name_surname',
        'tc_id_number',
        'phone',
        'email',
        'polyclinic',
        'service_id',
        'profession_id',
        'doctor_id',
        'description',
        'type',
        'is_read',
        'client_ip',
        'appointment_date',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($model){
            $model->is_read = 0;
        });
    }

    public static function makeValidation($data, $type = 0)
    {
        $validation = null;

        switch ($type){
            case 1: {
                $validation = Validator::make($data, [
                    'name_surname'          => 'required|string|max:255',
                    'phone'                 => 'required|string|max:20',
                    'email'                 => 'required|string|max:100',
                    'message'               => 'required|string',
                ], [
                    'name_surname.required'          => 'İsim Soyisim alanı boş bırakılamaz',
                    'phone.required'                 => 'Telefon alanı boş bırakılamaz',
                    'email.required'                 => 'E-posta alanı boş bırakılamaz',
                    'message.required'               => 'Mesaj alanı boş bırakılamaz',

                    'name_surname.max'          => 'İsim Soyisim en fazla 255 karakter olabilir',
                    'phone.max'                 => 'Telefon Numarası en fazla 20 karakter olabilir',
                    'email.max'                 => 'E-posta adresi en fazla 100 karakter olabilir',
                ]);
                break;
            }
            case 2: {
                $validation = Validator::make($data, [
                    'name_surname'          => 'required|string|max:255',
                    'phone'                 => 'required|string|max:20',
                    'email'                 => 'required|string|max:100',
                    'polyclinic'            => 'required',
                ], [
                    'name_surname.required'          => 'İsim Soyisim alanı boş bırakılamaz',
                    'phone.required'                 => 'Telefon alanı boş bırakılamaz',
                    'email.required'                 => 'E-posta alanı boş bırakılamaz',
                    'polyclinic.required'            => 'Merkez alanı boş bırakılamaz',

                    'name_surname.max'          => 'İsim Soyisim en fazla 255 karakter olabilir',
                    'phone.max'                 => 'Telefon Numarası en fazla 20 karakter olabilir',
                    'email.max'                 => 'E-posta adresi en fazla 100 karakter olabilir',
                ]);
                break;
            }
            case 3: {
                $validation = Validator::make($data, [
                    'name_surname'          => 'required|string|max:255',
                    'phone'                 => 'required|string|max:20',
                    'appointment_date'      => 'required',
                ], [
                    'name_surname.required'          => 'İsim Soyisim alanı boş bırakılamaz',
                    'phone.required'                 => 'Telefon alanı boş bırakılamaz',
                    'appointment_date.required'      => 'Randevu Tarihi alanı boş bırakılamaz',

                    'name_surname.max'          => 'İsim Soyisim en fazla 255 karakter olabilir',
                    'phone.max'                 => 'Telefon Numarası en fazla 20 karakter olabilir',
                ]);
                break;
            }
        }

        if ($validation == null || $validation->fails())
            return ResultControl::Error($validation->errors()->first());
        return ResultControl::Success();
    }
}
